%solo lo necesario para gdl
cell_size(x,6).
cell_size(y,6).

index(0).
index(1).
index(2).
index(3).
index(4).
index(5).

pelota(1).
pelota(2).

max_pelota(2).

count_pelota(0).
count_pelota(1).
count_pelota(2).

init(cell(0,0,p)).
init(cell(0,1,p)).
init(cell(0,2,p)).
init(cell(0,3,p)).
init(cell(0,4,p)).
init(cell(0,5,p)).

init(cell(1,0,p)).
init(cell(1,1,b)).
init(cell(1,2,b)).
init(cell(1,3,b)).
init(cell(1,4,y)).
init(cell(1,5,p)).

init(cell(2,0,p)).
init(cell(2,1,b)).
init(cell(2,2,b)).
init(cell(2,3,b)).
init(cell(2,4,b)).
init(cell(2,5,p)).

init(cell(3,0,p)).
init(cell(3,1,b)).
init(cell(3,2,b)).
init(cell(3,3,b)).
init(cell(3,4,b)).
init(cell(3,5,p)).

init(cell(4,0,p)).
init(cell(4,1,x)).
init(cell(4,2,b)).
init(cell(4,3,b)).
init(cell(4,4,b)).
init(cell(4,5,p)).

init(cell(5,0,p)).
init(cell(5,1,p)).
init(cell(5,2,p)).
init(cell(5,3,p)).
init(cell(5,4,p)).
init(cell(5,5,p)).


init(pelotas(x,2)).
init(pelotas(y,2)).


init(control(x)).

%posibles valores que pueden tener las relaciones
base(cell(X,Y,b)) :- 
  index(X),
  index(Y).

base(cell(X,Y,p)) :- 
  index(X),
  index(Y).

base(cell(X,Y,R)) :- 
  role(R),
  index(X),
  index(Y).

base(cell(X,Y,pelota(R,P,XV,YV))) :- 
  role(R),
  pelota(P),
  index(X),
  index(Y),
  velocidad(XV),
  velocidad(YV).

base(cell(X,Y,golpeado(R))) :- 
  role(R),
  index(X),
  index(Y).

base(pelotas(R,C)) :-
  role(R),
  count_pelota(C).

base(control(R)) :- 
  role(R).

velocidad(0).
velocidad(1).
velocidad(-1).

%posibles valores que pueden tener las entradas
input(R,lanzar(X,Y)) :- 
  role(R),
  index(X),
  index(Y).

input(R,mover(X,Y)) :- 
  role(R),
  index(X),
  index(Y).

input(R,nada) :- 
  role(R).

%movimientos legales
legal(R,lanzar(X,Y)) :- 
  t(control(R)),
  (t(cell(X,Y,b));t(cell(X,Y,x));t(cell(X,Y,y))),
  \+(posicion_futura(_R,_P,X,Y)),
  t(cell(X1,Y1,R)),
  adyacente(X,Y,X1,Y1),
  t(pelotas(R,C)),
  C > 0.

legal(R,mover(X,Y)) :- 
  t(control(R)),
  t(cell(X,Y,pelota(_R1,_P,_XV,_YV))),
  t(cell(X1,Y1,R)),
  adyacente(X,Y,X1,Y1).

legal(R,mover(X,Y)) :- 
  t(control(R)),
  t(cell(X,Y,b)),
  t(cell(X1,Y1,R)),
  adyacente(X,Y,X1,Y1).

legal(_R,nada).

adyacente(X1,Y1,X2,Y2) :-
  ((X1 is X2+1; X1 is X2-1),(Y1 is Y2+1; Y1 is Y2-1));
  ((X1 is X2),(Y1 is Y2+1; Y1 is Y2-1));
  ((X1 is X2+1; X1 is X2-1),(Y1 is Y2)).

%próximo estado
%celdas con paredes
next(cell(X,Y,p)) :- 
  t(cell(X,Y,p)).

%celdas con jugador golpeado
%si se mueve hacia una pelota enemiga
next(cell(X,Y,golpeado(R))) :-
  does(R,mover(X,Y)),
  posicion_futura(E,_P,X,Y),
  E \== R,
  \+colision(X,Y).

%si se mueve hacia una pelota que viene directo hacia él.
next(cell(X1,Y1,golpeado(R))) :-
  does(R,mover(X,Y)),
  t(cell(X1,Y1,R)),
  t(cell(X,Y,pelota(E,P,_XV,_YV))),
  E \== R,
  posicion_futura(E,P,X1,Y1),
  \+colision(X,Y).

%si el enemigo le lanza una pelota
next(cell(X,Y,golpeado(R))) :-
  does(E,lanzar(X,Y)),
  t(cell(X,Y,R)),
  E \== R.

%si no hace nada y una pelota enemiga lo golpea
next(cell(X,Y,golpeado(R))) :-
  does(R,nada),
  t(cell(X,Y,R)),
  posicion_futura(E,_P,X,Y),
  E \== R,
  \+colision(X,Y).

%celdas con jugadores
%	caso de ser golpeado se maneja 
%	antes y no hay q contemplarlo aca

%si hizo nada o lanzo y no cae pelota entonces la celda tiene al jugador.
next(cell(X,Y,R)) :-
  (does(R,nada);does(R,lanzar(_X1,_Y1))),
  t(cell(X,Y,R)),
  \+posicion_futura(_E,_P,X,Y).

%si hizo nada o lanzo y no cae pelota por colision, entonces la celda tiene al jugador.
next(cell(X,Y,R)) :-
  (does(R,nada);does(R,lanzar(_X1,_Y1))),
  t(cell(X,Y,R)),
  posicion_futura(_E,_P,X,Y),
  colision(X,Y).

%si hizo nada o lanzo, y cae una pelota que es del role, entonces la celda tiene al rol.
next(cell(X,Y,R)) :-
  (does(R,nada);does(R,lanzar(_X1,_Y1))),
  t(cell(X,Y,R)),
  posicion_futura(R,_P,X,Y),
  \+colision(X,Y).

%si se mueve y cae pelota del role, entonces la celda  tiene al role.
next(cell(X,Y,R)) :-
  does(R,mover(X,Y)),
  posicion_futura(R,_P,X,Y),
  \+colision(X,Y).

%si se mueve y no cae pelota, entonces la celda tiene al jugador
next(cell(X,Y,R)) :-
  does(R,mover(X,Y)),
  \+posicion_futura(_E,_P,X,Y).


%celdas con pelotas
%una pelota es lanzada
next(cell(X,Y,pelota(R,P,XV,YV))) :- 
  does(R,lanzar(X,Y)),
  t(cell(XR,YR,R)),
  XV is X - XR,
  YV is Y - YR,
  init(pelotas(R,CantP)),
  buscar_pelota_no_usada(R,CantP,P),
  P\==e.

%esta quieta en una casilla
next(cell(X,Y,pelota(R,P,0,0))) :- 
  t(cell(X,Y,pelota(R,P,0,0))),
  \+(does(_R1,mover(X,Y))).

%choca contra una pered y tiene que regresar hacia la misma celda, entonces se invierte su velocidad
next(cell(X,Y,pelota(R,P,XV,YV))) :- 
  t(cell(X1,Y1,pelota(R,P,XV1,YV1))),
  posicion_futura(R,P,X,Y),
  \+(colision(X,Y)),
  \+(does(_R1,mover(X,Y))),
  X == X1, Y == Y1, %al preguntar si son iguales no es necesario ver que sea una casilla blanca
  XV is XV1 * (-1),
  YV is YV1 * (-1).

%choca contra una pered y viene en diagonal, entonces se invierte su velocidad sobre el eje ignorado (X)
next(cell(X,Y,pelota(R,P,XV,YV))) :- 
  t(cell(X1,Y1,pelota(R,P,XV,YV1))),
  posicion_futura(R,P,X,Y),
  \+(colision(X,Y)),
  \+(does(_R1,mover(X,Y))),
  X \== X1, Y == Y1,
  t(cell(X,Y,b)),
  YV is YV1 * (-1).

%choca contra una pered y viene en diagonal, entonces se invierte su velocidad sobre el eje ignorado (Y)
next(cell(X,Y,pelota(R,P,XV,YV))) :- 
  t(cell(X1,Y1,pelota(R,P,XV1,YV))),
  posicion_futura(R,P,X,Y),
  \+(colision(X,Y)),
  \+(does(_R1,mover(X,Y))),
  X == X1, Y \== Y1,
  t(cell(X,Y,b)),
  XV is XV1 * (-1).

 %avanza normalmente
next(cell(X,Y,pelota(R,P,XV,YV))) :- 
  t(cell(X1,Y1,pelota(R,P,XV,YV))),
  posicion_futura(R,P,X,Y),
  \+(colision(X,Y)),
  t(cell(X,Y,b)),
  \+(does(_R1,mover(X,Y))),
  X is X1 + XV,
  Y is Y1 + YV.

%detecta que choco contra otra pelota a uno de distancia, 
%o con una pelota quieta a cero distancia
next(cell(X,Y,pelota(R,P,0,0))) :- 
  t(cell(X,Y,pelota(R,P,_XV,_YV))),
  posicion_futura(R,P,X1,Y1),
  colision(X1,Y1),
  \+(does(_R1,mover(X,Y))).

%detecta que atravesó a otra pelota a cero distancia
 next(cell(X,Y,pelota(R,P,0,0))) :- 
   t(cell(X,Y,pelota(R,P,_XV,_YV))),
   posicion_futura(R,P,X1,Y1),
   t(cell(X1,Y1,pelota(R1,P1,_XV1,_YV1))),
   posicion_futura(R1,P1,X,Y),
   (R1 \== R;P1 \== P),
   \+(does(_R1,mover(X,Y))).

%se cruza con una pelota pero la otra no viene en sentido contrario 
next(cell(X1,Y1,pelota(R,P,XV,YV))) :- 
   t(cell(X,Y,pelota(R,P,XV,YV))),
   posicion_futura(R,P,X1,Y1),
   t(cell(X1,Y1,pelota(R1,P1,_XV1,_YV1))),
   (R1 \== R;P1 \== P),
   \+posicion_futura(R1,P1,X,Y),
   \+posicion_futura(R1,P1,X1,Y1),
   \+(does(_R1,mover(X1,Y1))).

%se cruza con una pelota y la otra  no viene en sentido contrario  pero regresa a su casilla porque choca
next(cell(X,Y,pelota(R,P,0,0))) :- 
   t(cell(X,Y,pelota(R,P,_XV,_YV))),
   posicion_futura(R,P,X1,Y1),
   t(cell(X1,Y1,pelota(R1,P1,_XV1,_YV1))),
   (posicion_futura(R1,P1,X,Y);posicion_futura(R1,P1,X1,Y1)),
   (R1 \== R;P1 \== P),
   \+(does(_R1,mover(X,Y))).

%avanza a una casilla que tiene un jugador pero ese jugador la esquiva
next(cell(X,Y,pelota(R,P,XV,YV))) :- 
  t(cell(X1,Y1,pelota(R,P,XV,YV))),
  posicion_futura(R,P,X,Y),
  \+(colision(X,Y)),
  t(cell(X,Y,R1)),
  (does(R1,mover(X2,Y2))),
  (X1\==X2; Y1\==Y2).


%celdas vacias
%si alguien se mueve desde ella
next(cell(X,Y,b)) :-
  t(cell(X,Y,R)),
  does(R,mover(_X1,_Y1)),
  (\+posicion_futura(_R1,_P,X,Y);colision(X,Y)).

%si es blanca y alguien se mueve y no es sobre ella
next(cell(X,Y,b)) :-
  t(cell(X,Y,b)),
  does(_R,mover(X1,Y1)),
  (X\==X1;Y\==Y1),
  (\+posicion_futura(_R1,_P,X,Y);colision(X,Y)).

%si es blanca y alguien lanza una pelota y no es sobre ella
next(cell(X,Y,b)) :-
  t(cell(X,Y,b)),
  does(_R,lanzar(X1,Y1)),
  (X\==X1;Y\==Y1),
  (\+posicion_futura(_R1,_P,X,Y);colision(X,Y)).

%si tiene una pelota y la pelota puede moverse. 
% y nadie se mueve sobre ella
next(cell(X,Y,b)) :- 
  t(cell(X,Y,pelota(R,P,XV,YV))),
  S is X + XV,
  T is Y + YV,
  \+colision(S,T),
  \+(posicion_futura(R,P,X,Y)),
  \+(does(_R2,mover(X,Y))),
  (\+(posicion_futura(_R1,_P1,X,Y));colision(X,Y)),
  \+(does(_R3,lanzar(X,Y))).

%si es blanca y pasa nada
next(cell(X,Y,b)) :-
  t(cell(X,Y,b)),
  t(control(R)),
  does(R,nada),
  (\+posicion_futura(_R1,_P,X,Y);colision(X,Y)).

%si el jugador se mueve hacia una pelota de él, que viene directo hacia él.
next(cell(X,Y,b)) :-
  t(cell(X,Y,R)),
  does(R,mover(X1,Y1)),
  t(cell(X1,Y1,pelota(R,P,_XV,_YV))),
  posicion_futura(R,P,X2,Y2),
  X2==X,Y2==Y.

%si lanza y le cae una pelota sigue teniendo la misma cantidad
next(pelotas(R,C2)) :-
  does(R,lanzar(_X,_Y)),
  t(cell(X,Y,R)),
  cae_pelota(X,Y,R),
  t(pelotas(R,C2)).

%si lanza y no le cae pelota pierde una
next(pelotas(R,C1)) :-
  does(R,lanzar(_X,_Y)),
  t(cell(X,Y,R)),
  \+cae_pelota(X,Y,R),
  t(pelotas(R,C2)),
  C1 is C2-1.


%si se mueve a donde va a estar una pelota gana una
next(pelotas(R,C1)) :-
  does(R,mover(X,Y)),
  cae_pelota(X,Y,R),
  t(pelotas(R,C2)),
  C1 is C2+1.

%si se mueve a hacia una pelota que viene directo hacia él gana una.
next(pelotas(R,C1)) :-
  does(R,mover(X,Y)),
  t(cell(X1,Y1,R)),
  t(cell(X,Y,pelota(R,P,_XV,_YV))),
  posicion_futura(R,P,X2,Y2),
  X2==X1,Y2==Y1,
  t(pelotas(R,C2)),
  C1 is C2+1.

%si se mueve y no hay pelota sigue igual
next(pelotas(R,C2)) :-
  does(R,mover(X,Y)),
  \+cae_pelota(X,Y,R),
  t(pelotas(R,C2)).

%si hace nada y le cae pelota gana una
next(pelotas(R,C1)) :-
  does(R,nada),
  t(cell(X,Y,R)),
  cae_pelota(X,Y,R),
  t(pelotas(R,C2)),
  C1 is C2+1.

%si hace nada y no le cae pelota sigue igual
next(pelotas(R,C2)) :-
  does(R,nada),
  t(cell(X,Y,R)),
  \+cae_pelota(X,Y,R),
  t(pelotas(R,C2)).


%control de jugadores
next(control(x)) :-
  t(control(y)).

next(control(y)) :-
  t(control(x)).

%llega pelota porque no hay colision.
cae_pelota(X,Y,R):-
	posicion_futura(R,_P,X,Y),
	\+colision(X,Y).

%se queda en el lugar porque tiene velocidad 0,0
posicion_futura(R,P,X,Y) :-
  t(cell(X,Y,pelota(R,P,0,0))).

%avanza segun su velocidad
posicion_futura(R,P,XF,YF) :- 
  t(cell(X,Y,pelota(R,P,XV,YV))),
  XF is X + XV,
  YF is Y + YV,
  \+(t(cell(XF,YF,p))).
  %adyacente(XF,YF,XO,YO),
  %% \+(posicion_futura(_R,_P,XF,YF)).

%choca en direccion arriba/abajo o izquierda/derecha y se queda en el lugar
posicion_futura(R,P,X,Y) :-
  t(cell(X,Y,pelota(R,P,XV,YV))),
  XF is X + XV,
  YF is Y + YV,
  t(cell(XF,YF,p)),
  %abajo o arriba
  (((XV == 1;XV == -1),YV == 0);
  %derecha o izquierda
  (XV == 0,(YV == 1;YV == -1))).

%choca en direccion diagonal y se queda en el lugar
posicion_futura(R,P,X,Y) :-
  t(cell(X,Y,pelota(R,P,XV,YV))),
  XF is X + XV,
  YF is Y + YV,
  t(cell(XF,YF,p)),		%celda futura
  ((t(cell(X,YF,p)),t(cell(XF,Y,p))); 	%celda 1
  ((\+(t(cell(X,YF,p))),\+(t(cell(XF,Y,p)))))), 	%celda 2
  %diagonales
  ((XV == 1;XV == -1),(YV == 1;YV == -1)).

%choca en diagonal y avanza en x
posicion_futura(R,P,XF,Y) :-
  t(cell(X,Y,pelota(R,P,XV,YV))),
  XF is X + XV,
  YF is Y + YV,
  t(cell(XF,YF,p)),		%celda futura
  t(cell(X,YF,p)), 	%celda 1
  \+t(cell(XF,Y,p)), 	%celda 2
  %diagonales
  ((XV == 1;XV == -1),(YV == 1;YV == -1)).

%choca en diagonal y avanza en y
posicion_futura(R,P,X,YF) :-
  t(cell(X,Y,pelota(R,P,XV,YV))),
  XF is X + XV,
  YF is Y + YV,
  t(cell(XF,YF,p)),		%celda futura
  \+t(cell(X,YF,p)), 	%celda 1
  t(cell(XF,Y,p)), 	%celda 2
  %diagonales
  ((XV == 1;XV == -1),(YV == 1;YV == -1)).

colision(X,Y) :-
  posicion_futura(R1,P1,X,Y),
  posicion_futura(R2,P2,X,Y),
  (R1 \== R2;P1 \== P2).

buscar_pelota_no_usada(_R,0,e).

buscar_pelota_no_usada(R,P,P):-
  \+(t(cell(_X,_Y,pelota(R,P,_XV,_YV)))).

buscar_pelota_no_usada(R,P,OP) :-
  t(cell(_X,_Y,pelota(R,P,_XV,_YV))),
  P1 is P-1,
  buscar_pelota_no_usada(R,P1,OP).

goal(x,0) :- 
  golpeado(x).
goal(x,50) :- 
  golpeado(x),
  golpeado(y).
goal(x,100) :- 
  golpeado(y).

goal(y,0) :- 
  golpeado(y).
goal(y,50) :- 
  golpeado(y),
  golpeado(x).
goal(y,100) :- 
  golpeado(x).

%si golpeado no esta assertado goal falla, por eso este ultimo para el agente
goal(_R,25) :-
  \+golpeado(x),
  \+golpeado(y).

terminal :- 
  (golpeado(x); golpeado(y)).

golpeado(R) :-
  t(cell(_X,_Y,golpeado(R))).
